/*
 * DBFrame.java
 */
package database2019;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;

public class Chiave_Esterna extends DBFrame {

   public Chiave_Esterna() {
      super();
      initComponents();
      setModalita(FK);
      setFrameTable(tabChiave_Esterna);
      setNomeTabella("Chiave_Esterna");
   }

   /**
    * Imposta lo stato corrente del form. <br> In base allo stato vengono
    * abilitati o disabilitati alcuni oggetti del form.
    * 
    * @param modo intero che rappresenta lo stato
    */
   @Override
   final public void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
          case FK:
            tCodice.setEnabled (false);
            tCodiceCE.setEnabled(false);
            tNome.setEnabled (false);
            tAppartenenza_Classe.setEnabled (false);           
            break;
         case APPEND_QUERY:
            tCodice.setEnabled (false);
            tCodiceCE.setEnabled(false);
            tNome.setEnabled (false);
            tAppartenenza_Classe.setEnabled (false);
            break;
         case BROWSE:
            tCodice.setEnabled (false);
            tCodiceCE.setEnabled(false);
            tNome.setEnabled (false);
            tAppartenenza_Classe.setEnabled (false);            
            break;
         case UPDATE:
            tCodice.setEnabled (false);
            tCodiceCE.setEnabled(false);
            tNome.setEnabled (false);
            tAppartenenza_Classe.setEnabled (false);           
            break;
      }
     
   }

   /**
    * Mostra una descrizione di un errore SQL in un linguaggio comprensibile per
    * l'utente finale.
    * 
    * @param e eccezione SQLException catturata
    * @param query l'istruzione SQL che ha causato l'errore
    * @param contesto intero per distinguere se l'eccezione ha avuto origine
    * da una query
    */
   @Override
   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste già un'altra Chiave_Esterna con lo stesso Codice";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   /**
    * Metodo da usare nei form di lookup per passare i dati al form
    * chiamante.
    */
   @Override
   protected void premutoOK() {
      if (getPadre() != null) {
         try {
            rs.close();
         } catch (SQLException e) {
            mostraErrori(e);
         }
         dispose();
      }
   }



   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        spChiave_Esterna = new javax.swing.JScrollPane();
        tabChiave_Esterna = new javax.swing.JTable();
        tCodice = new javax.swing.JTextField();
        jCodice = new javax.swing.JLabel();
        jCodiceCE = new javax.swing.JLabel();
        jNome = new javax.swing.JLabel();
        jAppartenenza_Classe = new javax.swing.JLabel();
        tCodiceCE = new javax.swing.JTextField();
        tNome = new javax.swing.JTextField();
        tAppartenenza_Classe = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chiave_Esterna");
        setBackground(new java.awt.Color(102, 255, 255));
        setLocation(new java.awt.Point(640, 480));

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(102, 255, 255));

        tabChiave_Esterna.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        spChiave_Esterna.setViewportView(tabChiave_Esterna);

        jCodice.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jCodice.setForeground(new java.awt.Color(255, 255, 255));
        jCodice.setText("Codice");

        jCodiceCE.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jCodiceCE.setForeground(new java.awt.Color(255, 255, 255));
        jCodiceCE.setText("CodiceCE");

        jNome.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jNome.setForeground(new java.awt.Color(255, 255, 255));
        jNome.setText("Nome");

        jAppartenenza_Classe.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jAppartenenza_Classe.setForeground(new java.awt.Color(255, 255, 255));
        jAppartenenza_Classe.setText("Appartenenza_Classe");

        tCodiceCE.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tNomeActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("Questa tabella può essere utilizzata dall'utente solo\nper effettuare ricerche di chiave esterne, in modo\nche non debba ricordarle tutte.");
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(121, Short.MAX_VALUE)
                .add(spChiave_Esterna, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 797, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(111, 111, 111))
            .add(jPanel1Layout.createSequentialGroup()
                .add(155, 155, 155)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jCodiceCE)
                                .add(18, 18, 18)
                                .add(tCodiceCE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 195, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jCodice)
                                .add(33, 33, 33)
                                .add(tCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 196, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(62, 62, 62)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jNome)
                            .add(jAppartenenza_Classe))
                        .add(50, 50, 50)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(tNome)
                            .add(tAppartenenza_Classe, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 193, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 380, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(134, 134, 134)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(172, Short.MAX_VALUE)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCodice)
                    .add(jNome)
                    .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(24, 24, 24)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCodiceCE)
                    .add(jAppartenenza_Classe)
                    .add(tCodiceCE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tAppartenenza_Classe, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(31, 31, 31)
                .add(spChiave_Esterna, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 263, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tNomeActionPerformed

   /**
    * Ricopia i dati della riga selezionata del JTable
    * sugli altri controlli della finestra.
    */
   @Override
    protected void mostraDati() {
      try {
            rs.previous(); rs.next();
	    tCodice.setText(rs.getString("Codice"));
            tCodiceCE.setText(rs.getString("CodiceCE"));
	    tNome.setText(rs.getString("Codice"));
	    tAppartenenza_Classe.setText(rs.getString("Appartenenza_Classe"));
        
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   /**
    * Cancella i dati presenti in tutti i controlli presenti sul form.
    */
   @Override
    protected void pulisci() {
      super.pulisci();
        tCodice.setText("");
        tCodiceCE.setText("");
        tNome.setText("");
        tAppartenenza_Classe.setText("");
        
        
   }

   /**
    * Forma una query corrispondente ai dati inseriti nei
    * controlli della finestra.
    * 
    * @return query, come {@link PreparedStatement}
    */
  @Override
   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st;
      String   codice, codicece, nome, appartenenza_classe;
      Pattern pat;
      Matcher matc;
      int k = 1;
      super.creaSelectStatement();
      codice = String.valueOf(tCodice.getText());
      codicece= tCodiceCE.getText();
      nome = tNome.getText();
      appartenenza_classe = tAppartenenza_Classe.getText();
      
      

      query += " where";
      
      if (codice.length() > 0) {
         query += " Codice= ? and";
      }
      if (codicece.length() > 0) {
         if (codicece.contains("%")) {
            query += " CodiceCE like ? and";
         } else {
            query += " CodiceCE = ? and";
         }
      }
	  if (nome.length() > 0) {
         if (nome.contains("%")) {
            query += " Nome like ? and";
         } else {
            query += " Nome = ? and";
         }
      }
	  if (appartenenza_classe.length() > 0) {
         if (appartenenza_classe.contains("%")) {
            query += " Appartenenza_Classe like ? and";
         } else {
            query += " Appartenenza_Classe = ? and";
         }
      }
      pat = Pattern.compile("where$|and$"); //cancella where o and finali
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (codice.length() > 0) {
            st.setString(k++, codice);
         }
         if (codicece.length() > 0) {
            st.setString(k++, codicece);
         }
		 if (nome.length() > 0) {
            st.setString(k++, nome);
         }
		 if (appartenenza_classe.length() > 0) {
            st.setString(k++, appartenenza_classe);
         }
         return st;
      } catch (SQLException e) {
         mostraErrori(e);
         return null;
      }
   }

   /**
    * Prepara il comando SQL di inserimento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoInserimento(Connection c)
        throws SQLException {
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + Database.schema + ".Chiave_Esterna (Codice,"
         + "CodiceCE,Nome,Appartenenza_Classe)  values(?,?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        st.setString(1, String.valueOf(tCodice.getText()));
        st.setString(2, tCodiceCE.getText());
        st.setString(3, tNome.getText());
        st.setString(4, tAppartenenza_Classe.getText());
        return st;
   }

   /**
    * Prepara il comando SQL di aggiornamento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoAggiornamento ( Connection c) throws SQLException {
       String cmdUp;
       PreparedStatement st;
       cmdUp = "update " + Database.schema + ".Chiave_Esterna set CodiceCE=?,"
               + "Nome=?,Appartenenza_Classe=? where Codice=?" ;
       st = c.prepareStatement(cmdUp);
       st.setString(4, tCodice.getText());
       st.setString(1, tCodiceCE.getText());
       st.setString(2, tNome.getText());
       st.setString(3, tAppartenenza_Classe.getText());

       return st;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jAppartenenza_Classe;
    private javax.swing.JLabel jCodice;
    private javax.swing.JLabel jCodiceCE;
    private javax.swing.JLabel jNome;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JScrollPane spChiave_Esterna;
    private javax.swing.JTextField tAppartenenza_Classe;
    private javax.swing.JTextField tCodice;
    private javax.swing.JTextField tCodiceCE;
    private javax.swing.JTextField tNome;
    private javax.swing.JTable tabChiave_Esterna;
    // End of variables declaration//GEN-END:variables



   @Override
   protected void getComandoElimina(Connection c)
    throws SQLException {
        String cmd;
        cmd = "delete from " + Database.schema + "." + "Chiave_Esterna"
               + " where Codice=?";
        try {
            Connection conn = Database.getDefaultConnection();
            PreparedStatement st = conn.prepareStatement(cmd);
            st.setString(1, tCodice.getText());
            st.executeUpdate();
            } catch (SQLException e) {
             mostraErrori(e);
        }     
   }
}