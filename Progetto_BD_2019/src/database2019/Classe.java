/*
 * DBFrame.java
 */
package database2019;

import java.awt.event.ItemEvent;
import java.sql.*;
import javax.swing.*;
import java.util.regex.*;
import java.time.Year;
import java.time.LocalDate;

public class Classe extends DBFrame {
 private final SelettoreData dataInserimento, dataModifica;
    
   public Classe() {
      super();
      initComponents();
      dataInserimento = new SelettoreData(gDataInserimento, mDataInserimento,  aDataInserimento, Year.of(1908), Year.now());
      dataModifica = new SelettoreData( gDataModifica,  mDataModifica, aDataModifica, Year.of(1908), Year.now());
      setModalita(INIZIO);
      setFrameTable(tabClasse);
      setNomeTabella("Classe");
   }

   /**
    * Imposta lo stato corrente del form. <br> In base allo stato vengono
    * abilitati o disabilitati alcuni oggetti del form.
    * 
    * @param modo intero che rappresenta lo stato
    */
   @Override
   final public void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
          case INIZIO:
            tIdC.setEnabled (false);
            tNomeC.setEnabled(false);
            tDescrizione.setEnabled(false);
            tCodice.setEnabled(false);
            tGenerale.setEnabled(false);
            tAggregata.setEnabled(false);
            tComposta.setEnabled(false);
            tIdAss.setEnabled(false);
            tTipoClasse.setEnabled(false);
            dataInserimento.setEnabled(false);
            dataModifica.setEnabled(false);
            break;
         case APPEND_QUERY:
            tIdC.setEnabled (true);
            tNomeC.setEnabled(true);
            tDescrizione.setEnabled(true);
            tCodice.setEnabled(true);
            tGenerale.setEnabled(true);
            tAggregata.setEnabled(true);
            tComposta.setEnabled(true);
            tIdAss.setEnabled(false);
            tTipoClasse.setEnabled(true);
            dataInserimento.setEnabled(true);
            dataModifica.setEnabled(true);
            break;
         case BROWSE:
            tIdC.setEnabled (false);
            tNomeC.setEnabled(false);
            tDescrizione.setEnabled(false);
            tCodice.setEnabled(false);
            tGenerale.setEnabled(false);
            tAggregata.setEnabled(false);
            tComposta.setEnabled(false);
            tIdAss.setEnabled(false);
            tTipoClasse.setEnabled(false);
            dataInserimento.setEnabled(false);
            dataModifica.setEnabled(false);
            break;
         case UPDATE:
            tIdC.setEnabled (false);
            tNomeC.setEnabled(true);
            tDescrizione.setEnabled(true);
            tCodice.setEnabled(true);
            tGenerale.setEnabled(true);
            tAggregata.setEnabled(true);
            tComposta.setEnabled(true);
            tIdAss.setEnabled(false);
            tTipoClasse.setEnabled(true);
            dataInserimento.setEnabled(true);
            dataModifica.setEnabled(true);
            break;
      }
   }

   /**
    * Mostra una descrizione di un errore SQL in un linguaggio comprensibile per
    * l'utente finale.
    * 
    * @param e eccezione SQLException catturata
    * @param query l'istruzione SQL che ha causato l'errore
    * @param contesto intero per distinguere se l'eccezione ha avuto origine
    * da una query
    */
   @Override
   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi√† un'altra Classe con lo stesso Codice";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }
                                           

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jGenerale = new javax.swing.JLabel();
        jNomeC = new javax.swing.JLabel();
        tIdC = new javax.swing.JTextField();
        spClasse = new javax.swing.JScrollPane();
        tabClasse = new javax.swing.JTable();
        jDescrizione = new javax.swing.JLabel();
        jCodice = new javax.swing.JLabel();
        tNomeC = new javax.swing.JTextField();
        tDescrizione = new javax.swing.JTextField();
        tCodice = new javax.swing.JTextField();
        tGenerale = new javax.swing.JTextField();
        jcomposta = new javax.swing.JLabel();
        tComposta = new javax.swing.JTextField();
        jIdAss = new javax.swing.JLabel();
        jTipoClasse = new javax.swing.JLabel();
        jDataInserimento = new javax.swing.JLabel();
        jDataModifica = new javax.swing.JLabel();
        jAggregata = new javax.swing.JLabel();
        tIdAss = new javax.swing.JTextField();
        tTipoClasse = new javax.swing.JTextField();
        tAggregata = new javax.swing.JTextField();
        jIdC = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        gDataInserimento = new javax.swing.JComboBox<>();
        mDataInserimento = new javax.swing.JComboBox<>();
        aDataInserimento = new javax.swing.JComboBox<>();
        gDataModifica = new javax.swing.JComboBox<>();
        mDataModifica = new javax.swing.JComboBox<>();
        aDataModifica = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Classe");
        setBackground(new java.awt.Color(102, 255, 255));
        setLocation(new java.awt.Point(640, 480));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(102, 255, 255));

        jGenerale.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jGenerale.setForeground(new java.awt.Color(255, 255, 255));
        jGenerale.setText("Generale");

        jNomeC.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jNomeC.setForeground(new java.awt.Color(255, 255, 255));
        jNomeC.setText("NomeC");

        tIdC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tIdCActionPerformed(evt);
            }
        });

        tabClasse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null ,null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11"
            }
        ));
        spClasse.setViewportView(tabClasse);

        jDescrizione.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jDescrizione.setForeground(new java.awt.Color(255, 255, 255));
        jDescrizione.setText("Descrizione");

        jCodice.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jCodice.setForeground(new java.awt.Color(255, 255, 255));
        jCodice.setText("Codice");

        tCodice.setText("Chiave Esterna ClassDiagram");

        tGenerale.setText("Chiave Esterna Classe");
        tGenerale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tGeneraleActionPerformed(evt);
            }
        });

        jcomposta.setBackground(new java.awt.Color(255, 255, 255));
        jcomposta.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jcomposta.setForeground(new java.awt.Color(255, 255, 255));
        jcomposta.setText("Composta");

        tComposta.setText("Chiave Esterna Classe");

        jIdAss.setBackground(new java.awt.Color(255, 255, 255));
        jIdAss.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jIdAss.setForeground(new java.awt.Color(255, 255, 255));
        jIdAss.setText("IdAss");

        jTipoClasse.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jTipoClasse.setForeground(new java.awt.Color(255, 255, 255));
        jTipoClasse.setText("TipoClasse");

        jDataInserimento.setBackground(new java.awt.Color(255, 255, 255));
        jDataInserimento.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jDataInserimento.setForeground(new java.awt.Color(255, 255, 255));
        jDataInserimento.setText("DataInserimento");

        jDataModifica.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jDataModifica.setForeground(new java.awt.Color(255, 255, 255));
        jDataModifica.setText("DataModifica");

        jAggregata.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jAggregata.setForeground(new java.awt.Color(255, 255, 255));
        jAggregata.setText("Aggregata");

        tIdAss.setText("Chiave Esterna Classe_Di_Associazione");

        tTipoClasse.setText("classe_astratta o classe_concreta");

        tAggregata.setText("Chiave Esterna Classe");

        jIdC.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jIdC.setForeground(new java.awt.Color(255, 255, 255));
        jIdC.setText("IdC");

        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("*");

        jLabel2.setForeground(new java.awt.Color(255, 102, 102));
        jLabel2.setText("*");

        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("*");

        jLabel5.setForeground(new java.awt.Color(255, 0, 51));
        jLabel5.setText("*");

        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("*");

        jLabel7.setForeground(new java.awt.Color(255, 102, 102));
        jLabel7.setText("*");

        gDataInserimento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5","6","7","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31"  }));
        gDataInserimento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gDataInserimentoItemStateChanged(evt);
            }
        });
        gDataInserimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gDataInserimentoActionPerformed(evt);
            }
        });

        mDataInserimento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"}));
        mDataInserimento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mDataInserimentoItemStateChanged(evt);
            }
        });
        mDataInserimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mDataInserimentoActionPerformed(evt);
            }
        });

        aDataInserimento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0000" }));

        gDataModifica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5","6","7","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31" }));
        gDataModifica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gDataModificaItemStateChanged(evt);
            }
        });

        mDataModifica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre" }));
        mDataModifica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mDataModificaItemStateChanged(evt);
            }
        });

        aDataModifica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0000" }));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .add(spClasse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 970, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jGenerale)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jAggregata))
                        .add(222, 222, 222))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jNomeC)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jIdC))
                        .add(41, 41, 41)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(tNomeC)
                            .add(tIdC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jCodice)
                            .add(jDescrizione))
                        .add(41, 41, 41)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tGenerale, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tAggregata, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(58, 58, 58)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(jIdAss)
                        .add(jTipoClasse)
                        .add(jDataInserimento)
                        .add(jDataModifica))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jcomposta))
                .add(50, 50, 50)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(gDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(aDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(gDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(mDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(aDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLabel4))
                            .add(tIdAss, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .add(tComposta)
                            .add(tTipoClasse, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel1)
                            .add(jLabel2))))
                .add(66, 66, 66))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(156, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jcomposta)
                                    .add(tComposta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(18, 18, 18)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jIdAss)
                                    .add(tIdAss, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jTipoClasse)
                                    .add(tTipoClasse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel1)
                                .add(30, 30, 30)
                                .add(jLabel2)))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jDataInserimento)
                            .add(gDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(mDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(aDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jDataModifica)
                            .add(jLabel4)
                            .add(gDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(mDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(aDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(43, 43, 43))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(tIdC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jIdC))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(tNomeC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jNomeC))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jDescrizione)
                            .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jCodice)
                            .add(tCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jGenerale)
                            .add(tGenerale, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jAggregata)
                            .add(tAggregata, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel5))
                        .add(28, 28, 28)))
                .add(spClasse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 220, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tIdCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tIdCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tIdCActionPerformed

    private void tGeneraleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tGeneraleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tGeneraleActionPerformed

    private void gDataInserimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gDataInserimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gDataInserimentoActionPerformed

    private void mDataInserimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mDataInserimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mDataInserimentoActionPerformed

    private void gDataInserimentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gDataInserimentoItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataInserimento.cambiatoGiorno();
        }
    }//GEN-LAST:event_gDataInserimentoItemStateChanged
         
        
    private void mDataInserimentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mDataInserimentoItemStateChanged
         if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataInserimento.cambiatoGiorno();
        }
    }//GEN-LAST:event_mDataInserimentoItemStateChanged

    private void gDataModificaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gDataModificaItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataModifica.cambiatoGiorno();
        }
    }//GEN-LAST:event_gDataModificaItemStateChanged

    private void mDataModificaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mDataModificaItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataModifica.cambiatoGiorno();
        }
    }//GEN-LAST:event_mDataModificaItemStateChanged

   /**
    * Ricopia i dati della riga selezionata del JTable
    * sugli altri controlli della finestra.
    */
   @Override
   protected void mostraDati() {
      try {
         rs.previous(); rs.next();
         tIdC.setText(rs.getString("IdC"));
         tNomeC.setText(rs.getString("NomeC"));
         tDescrizione.setText(rs.getString("Descrizione"));
         tCodice.setText(rs.getString("Codice"));
         tGenerale.setText(rs.getString("Generale"));
         tAggregata.setText(rs.getString("Aggregata"));
         tComposta.setText(rs.getString("Composta"));
         tIdAss.setText(rs.getString("IdAss"));
         tTipoClasse.setText(rs.getString("TipoClasse"));
         dataInserimento.setDate(rs.getDate("DataInserimento"));
         dataModifica.setDate(rs.getDate("DataModifica"));
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   
   
   /**
    * Metodo da usare nei form di lookup per passare i dati al form
    * chiamante.
    */
   @Override
   protected void premutoOK() {
      if (getPadre() != null) {
         try {
            rs.close();
         } catch (SQLException e) {
            mostraErrori(e);
         }
         dispose();
      }
   }
   
   
   /**
    * Cancella i dati presenti in tutti i controlli presenti sul form.
    */
   @Override
   protected void pulisci() {
      super.pulisci();
      tIdC.setText("");
      tNomeC.setText("");
      tDescrizione.setText("");
      tCodice.setText("");
      tGenerale.setText("");
      tAggregata.setText("");
      tComposta.setText("");
      tIdAss.setText("");
      tTipoClasse.setText("");
      
       LocalDate d = null;
      dataInserimento.setDate(d);
      dataModifica.setDate(d);
   }

   /**
    * Forma una query corrispondente ai dati inseriti nei
    * controlli della finestra.
    * 
    * @return query, come {@link PreparedStatement}
    */
   @Override
   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st;
      String  nomec,idc,generale,aggregata,composta,idass,descrizione,codice,tipoclasse ;
      Pattern pat;
      Matcher matc;
      
      LocalDate inserimento, modifica;
      int k = 1;
      super.creaSelectStatement();
      //int idc = Integer.parseInt(tIdC.getText());
      idc = String.valueOf(tIdC.getText());
      nomec = tNomeC.getText();
      descrizione = tDescrizione.getText();
      codice = tCodice.getText();
      generale = String.valueOf(tGenerale.getText());
      aggregata = String.valueOf(tAggregata.getText());
      composta = String.valueOf(tComposta.getText());
      idass = String.valueOf(tIdAss.getText());
      tipoclasse = tTipoClasse.getText();
      inserimento = dataInserimento.getDate();
      modifica = dataModifica.getDate();

      query += " where";
      
      if (idc.length() > 0) {
         query += " IdC= ? and";
      }
      if (nomec.length() > 0) {
         if (nomec.contains("%")) {
            query += " NomeC like ? and";
         } else {
            query += " NomeC = ? and";
         }
      }
      if (descrizione.length() > 0) {
         if (descrizione.contains("%")) {
            query += " Descrizione like ? and";
         } else {
            query += " Descrizione = ? and";
         }
      }
      if (codice.length() > 0) {
         if (codice.contains("%")) {
            query += " Codice like ? and";
         } else {
            query += " Codice = ? and";
         }
      }
      if (generale.length() > 0) {
          if (generale.contains("%")) {
             query += " Generale like ? and";
          } else {
            query += " Generale = ? and";
         }
      }
      if (aggregata.length() > 0) {
           if (aggregata.contains("%")) {
              query += " Aggregata like ? and";
           } else {
            query += " Aggregata = ? and";
          }
      }
      if (composta.length() > 0) {
           if (composta.contains("%")) {
                query += " Composta like ? and";
           } else {
                query += " Composta = ? and";
           }
      }
       if (idass.length() > 0) {
           if (idass.contains("%")) {
                query += " IdAss like ? and";
           } else {
                query += " IdAss = ? and";
          }
      }
        if (tipoclasse.length() > 0) {
           if (tipoclasse.contains("%")) {
                query += " TipoClasse like ? and";
           } else {
                query += " TipoClasse = ? and";
          }
       }
     if (inserimento != null) {
            query += " DataInserimento = ? and";
         }
      pat = Pattern.compile("where$|and$"); //cancella where o and finali
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (idc.length() > 0) {
            st.setString(k++, idc);
         }
         if (nomec.length() > 0) {
            st.setString(k++, nomec);
         }
         if (descrizione.length() > 0) {
            st.setString(k++, descrizione);
         }
          if (codice.length() > 0) {
            st.setString(k++, codice);
         }
          if (generale.length() > 0) {
            st.setString(k++, generale);
         }
          if (aggregata.length() > 0) {
            st.setString(k++, aggregata);
         }
          if (composta.length() > 0) {
            st.setString(k++, composta);
         }
          if (idass.length() > 0) {
            st.setString(k++, idass);
         }
         if (tipoclasse.length() > 0) {
            st.setString(k++, tipoclasse);
         }
         if (inserimento != null) {
            st.setDate(k++, Date.valueOf(inserimento));
         }
         return st;
      } catch (SQLException e) {
         mostraErrori(e);
         return null;
      }
   }

   /**
    * Prepara il comando SQL di inserimento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoInserimento(Connection c)
        throws SQLException {
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + Database.schema + ".Classe (IdC,NomeC,"
                + "Descrizione,Codice,Generale,Aggregata,Composta,TipoClasse,"
                + "DataInserimento)  values(?,?,?,?,?,?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        st.setString(1, String.valueOf(tIdC.getText()));
        st.setString(2, tNomeC.getText());
        st.setString(3, tDescrizione.getText());
        st.setString(4, tCodice.getText());
        st.setString(5, String.valueOf(tGenerale.getText()));
        st.setString(6, String.valueOf(tAggregata.getText()));
        st.setString(7, String.valueOf(tComposta.getText()));
        st.setString(8, tTipoClasse.getText ());
        LocalDate inserimento = dataInserimento.getDate();
        if (inserimento == null) st.setDate(9, null);
        else st.setDate(9, Date.valueOf(dataInserimento.getDate()));
      
        return st;
   }

   /**
    * Prepara il comando SQL di aggiornamento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoAggiornamento ( Connection c) throws SQLException {
       String cmdUp;
       PreparedStatement st;
       cmdUp = "update " + Database.schema + ".Classe set  NomeC=?,Descrizione=?,"
               +"Codice=?,Generale=?,Aggregata=?,Composta=?,IdAss=?,TipoClasse=?,"
               + "DataInserimento=? where IdC=?";
       st = c.prepareStatement(cmdUp);
       st.setString(10, String.valueOf(tIdC.getText()));
       st.setString(1, tNomeC.getText());
       st.setString(2, tDescrizione.getText());
       st.setString(3, tCodice.getText());  
       st.setString(4, String.valueOf(tGenerale.getText()));
       st.setString(5, String.valueOf(tAggregata.getText()));
       st.setString(6, String.valueOf(tComposta.getText()));
       st.setString(7, String.valueOf(tIdAss.getText()));
       st.setString(8, tTipoClasse.getText());
       
       LocalDate inserimento = dataInserimento.getDate();
        if (inserimento == null) st.setDate(9, null);
        else st.setDate(9, Date.valueOf(dataInserimento.getDate()));
        
      
       return st;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> aDataInserimento;
    private javax.swing.JComboBox<String> aDataModifica;
    private javax.swing.JComboBox<String> gDataInserimento;
    private javax.swing.JComboBox<String> gDataModifica;
    private javax.swing.JLabel jAggregata;
    private javax.swing.JLabel jCodice;
    private javax.swing.JLabel jDataInserimento;
    private javax.swing.JLabel jDataModifica;
    private javax.swing.JLabel jDescrizione;
    private javax.swing.JLabel jGenerale;
    private javax.swing.JLabel jIdAss;
    private javax.swing.JLabel jIdC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jNomeC;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jTipoClasse;
    private javax.swing.JLabel jcomposta;
    private javax.swing.JComboBox<String> mDataInserimento;
    private javax.swing.JComboBox<String> mDataModifica;
    private javax.swing.JScrollPane spClasse;
    private javax.swing.JTextField tAggregata;
    private javax.swing.JTextField tCodice;
    private javax.swing.JTextField tComposta;
    private javax.swing.JTextField tDescrizione;
    private javax.swing.JTextField tGenerale;
    private javax.swing.JTextField tIdAss;
    private javax.swing.JTextField tIdC;
    private javax.swing.JTextField tNomeC;
    private javax.swing.JTextField tTipoClasse;
    private javax.swing.JTable tabClasse;
    // End of variables declaration//GEN-END:variables



   @Override
   protected void getComandoElimina(Connection c)
    throws SQLException {
        String cmd;
        cmd = "delete from " + Database.schema + "." + "Classe"
               + " where IdC=?";
        try {
            Connection conn = Database.getDefaultConnection();
            PreparedStatement st = conn.prepareStatement(cmd);
            st.setString(1, tIdC.getText());
            st.executeUpdate();
            } catch (SQLException e) {
             mostraErrori(e);
        }     
   }
}
