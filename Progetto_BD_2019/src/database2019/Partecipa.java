/*
 * DBFrame.java
 */
package database2019;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;

public class Partecipa extends DBFrame {

   public Partecipa() {
      super();
      initComponents();
      setModalita(INIZIO);
      setFrameTable(tabPartecipa);
      setNomeTabella("Partecipa");
   }

   /**
    * Imposta lo stato corrente del form. <br> In base allo stato vengono
    * abilitati o disabilitati alcuni oggetti del form.
    * 
    * @param modo intero che rappresenta lo stato
    */
   @Override
   final public void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
          case INIZIO:
            tCodAss.setEnabled (false);
            tRuoli.setEnabled(false);
            tCardinalità.setEnabled(false);
            tIdC.setEnabled(false);
            tDirezionalità.setEnabled(false);
            break;
         case APPEND_QUERY:
            tCodAss.setEnabled (true);
            tRuoli.setEnabled(true);
            tCardinalità.setEnabled(true);
            tIdC.setEnabled(true);
            tDirezionalità.setEnabled(true);
	    break;
         case BROWSE:
            tCodAss.setEnabled (false);
            tRuoli.setEnabled(false);
            tCardinalità.setEnabled(false);
            tIdC.setEnabled(false);
            tDirezionalità.setEnabled(false);
            break;
         case UPDATE:
            tCodAss.setEnabled (false);
            tRuoli.setEnabled(true);
            tCardinalità.setEnabled(true);
            tIdC.setEnabled(false);
            tDirezionalità.setEnabled(true);
            break;
      }
   }

   /**
    * Mostra una descrizione di un errore SQL in un linguaggio comprensibile per
    * l'utente finale.
    * 
    * @param e eccezione SQLException catturata
    * @param query l'istruzione SQL che ha causato l'errore
    * @param contesto intero per distinguere se l'eccezione ha avuto origine
    * da una query
    */
   @Override
   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste già un'altro Partecipa ";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   /**
    * Metodo da usare nei form di lookup per passare i dati al form
    * chiamante.
    */
   @Override
   protected void premutoOK() {
      if (getPadre() != null) {
         try {
            rs.close();
         } catch (SQLException e) {
            mostraErrori(e);
         }
         dispose();
      }
   }



   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jDirezionalità = new javax.swing.JLabel();
        jCodAss = new javax.swing.JLabel();
        jRuoli = new javax.swing.JLabel();
        tCodAss = new javax.swing.JTextField();
        spPartecipa = new javax.swing.JScrollPane();
        tabPartecipa = new javax.swing.JTable();
        jCardinalità = new javax.swing.JLabel();
        jIdC = new javax.swing.JLabel();
        tRuoli = new javax.swing.JTextField();
        tCardinalità = new javax.swing.JTextField();
        tIdC = new javax.swing.JTextField();
        tDirezionalità = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Partecipa");
        setBackground(new java.awt.Color(102, 255, 255));
        setLocation(new java.awt.Point(640, 480));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(102, 255, 255));

        jDirezionalità.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jDirezionalità.setForeground(new java.awt.Color(255, 255, 255));
        jDirezionalità.setText("Direzionalità");

        jCodAss.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jCodAss.setForeground(new java.awt.Color(255, 255, 255));
        jCodAss.setText("CodAss");

        jRuoli.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jRuoli.setForeground(new java.awt.Color(255, 255, 255));
        jRuoli.setText("Ruoli");

        tCodAss.setText("Chiave Esterna Associazione");
        tCodAss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCodAssActionPerformed(evt);
            }
        });

        tabPartecipa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null,null},
                {null, null, null, null,null},
                {null, null, null, null,null},
                {null, null, null, null,null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4" , "Title 5"
            }
        ));
        spPartecipa.setViewportView(tabPartecipa);

        jCardinalità.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jCardinalità.setForeground(new java.awt.Color(255, 255, 255));
        jCardinalità.setText("Cardinalità");

        jIdC.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jIdC.setForeground(new java.awt.Color(255, 255, 255));
        jIdC.setText("IdC");

        tIdC.setText("Chiave Esterna Classe");

        tDirezionalità.setText("Bidirezionale o Unidirezionale");
        tDirezionalità.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tDirezionalitàActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("*");

        jLabel3.setForeground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("*");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(91, 91, 91)
                        .add(spPartecipa, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 843, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(183, 183, 183)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jCardinalità)
                            .add(jIdC)
                            .add(jRuoli)
                            .add(jCodAss)
                            .add(jDirezionalità))
                        .add(67, 67, 67)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(tCodAss)
                            .add(tRuoli)
                            .add(tCardinalità)
                            .add(tIdC)
                            .add(tDirezionalità, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel3))))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(158, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCodAss)
                    .add(tCodAss, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jRuoli)
                    .add(tRuoli, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tCardinalità, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCardinalità))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tIdC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jIdC))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tDirezionalità, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jDirezionalità)
                    .add(jLabel3))
                .add(36, 36, 36)
                .add(spPartecipa, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(23, 23, 23))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tCodAssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCodAssActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tCodAssActionPerformed

    private void tDirezionalitàActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tDirezionalitàActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tDirezionalitàActionPerformed

   /**
    * Ricopia i dati della riga selezionata del JTable
    * sugli altri controlli della finestra.
    */
   @Override
    protected void mostraDati() {
      try {
            rs.previous(); rs.next();
            tCodAss.setText(rs.getString("CodAss"));
            tRuoli.setText(rs.getString("Ruoli"));
            tCardinalità.setText(rs.getString("Cardinalità"));
            tIdC.setText(rs.getString("IdC"));
            tDirezionalità.setText(rs.getString("Direzionalità"));
			
        
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   /**
    * Cancella i dati presenti in tutti i controlli presenti sul form.
    */
   @Override
    protected void pulisci() {
      super.pulisci();
        tCodAss.setText("");
        tRuoli.setText("");
        tCardinalità.setText("");
        tIdC.setText("");
        tDirezionalità.setText("");
        
   }

   /**
    * Forma una query corrispondente ai dati inseriti nei
    * controlli della finestra.
    * 
    * @return query, come {@link PreparedStatement}
    */
   @Override
   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st;
      String   codass, ruoli, cardinalità, idc, direzionalità;
      Pattern pat;
      Matcher matc;
      int k = 1;
      super.creaSelectStatement();
      codass = String.valueOf(tCodAss.getText());
      ruoli = tRuoli.getText();
      cardinalità = tCardinalità.getText();
      idc = String.valueOf(tIdC.getText());
      direzionalità = tDirezionalità.getText();

      query += " where";
    
      if (codass.length() > 0) {
		  if (codass.contains("%")) {
            query += " CodAss like ? and";
         } else {
            query += " CodAss = ? and";
         }
      }
      if (ruoli.length() > 0) {
         if (ruoli.contains("%")) {
            query += " Ruoli like ? and";
         } else {
            query += " Ruoli = ? and";
         }
      }
      if (cardinalità.length() > 0) {
         if (cardinalità.contains("%")) {
            query += " Cardinalità like ? and";
         } else {
            query += " Cardinalità = ? and";
         }
      }
      if (idc.length() > 0) {
         if (idc.contains("%")) {
            query += " IdC like ? and";
         } else {
            query += " IdC = ? and";
         }
      }
      if (direzionalità.length() > 0) {
         if (direzionalità.contains("%")) {
            query += " Direzionalità like ? and";
         } else {
            query += " Direzionalità = ? and";
         }
      }
      pat = Pattern.compile("where$|and$"); //cancella where o and finali
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (codass.length() > 0) {
            st.setString(k++, codass);
         }
         if (ruoli.length() > 0) {
            st.setString(k++, ruoli);
         }
         if (cardinalità.length() > 0) {
            st.setString(k++, cardinalità);
         }
         if (idc.length() > 0) {
            st.setString(k++, idc);
         }
         if (direzionalità.length() > 0) {
            st.setString(k++, direzionalità);
         }
         return st;
      } catch (SQLException e) {
         mostraErrori(e);
         return null;
      }
   }

   /**
    * Prepara il comando SQL di inserimento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoInserimento(Connection c)
        throws SQLException {
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + Database.schema + ".Partecipa (CodAss,Ruoli,"
                + "Cardinalità,IdC,Direzionalità)  values(?,?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        st.setString(1, String.valueOf(tCodAss.getText()));
        st.setString(2, tRuoli.getText());
        st.setString(3, tCardinalità.getText());
        st.setString(4, String.valueOf(tIdC.getText()));
        st.setString(5, tDirezionalità.getText ());
        return st;
   }

   /**
    * Prepara il comando SQL di aggiornamento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoAggiornamento (Connection c) throws SQLException {
       String cmdUp;
       PreparedStatement st;
       cmdUp = "update " + Database.schema + ".Partecipa set Ruoli=?,Cardinalità=?,"
               + " Direzionalità=?,CodAss=?,IdC=? where CodAss=? AND IdC=?" ; 
       st = c.prepareStatement(cmdUp);
       st.setString(7, String.valueOf(tIdC.getText()));
       st.setString(6, String.valueOf(tCodAss.getText()));
       st.setString(1, tRuoli.getText());
       st.setString(2, tCardinalità.getText());
       st.setString(3, tDirezionalità.getText());
       st.setString(4, String.valueOf(tCodAss.getText()));
       st.setString(5, String.valueOf(tIdC.getText()));
       return st;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jCardinalità;
    private javax.swing.JLabel jCodAss;
    private javax.swing.JLabel jDirezionalità;
    private javax.swing.JLabel jIdC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jRuoli;
    private javax.swing.JScrollPane spPartecipa;
    private javax.swing.JTextField tCardinalità;
    private javax.swing.JTextField tCodAss;
    private javax.swing.JTextField tDirezionalità;
    private javax.swing.JTextField tIdC;
    private javax.swing.JTextField tRuoli;
    private javax.swing.JTable tabPartecipa;
    // End of variables declaration//GEN-END:variables



   @Override
   protected void getComandoElimina(Connection c)
    throws SQLException {
        String cmd;
        cmd = "delete from " + Database.schema + "." + "Partecipa"
               + " where CodAss=? and IdC=?" ;
        try {
            Connection conn = Database.getDefaultConnection();
            PreparedStatement st = conn.prepareStatement(cmd);
            st.setString(1, tCodAss.getText());
	    st.setString(2, tIdC.getText());
            st.executeUpdate();
            } catch (SQLException e) {
             mostraErrori(e);
        }     
   }
}