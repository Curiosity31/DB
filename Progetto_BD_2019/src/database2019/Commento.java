/*
 * DBFrame.java
 */
package database2019;

import java.awt.event.ItemEvent;
import java.sql.*;
import javax.swing.*;
import java.util.regex.*;
import java.time.Year;
import java.time.LocalDate;

public class Commento extends DBFrame {
   private final SelettoreData dataInserimento, dataModifica;

   public Commento() {
      super();
      initComponents();
      dataInserimento = new SelettoreData(gDataInserimento, mDataInserimento,  aDataInserimento, Year.of(1908), Year.now());
      dataModifica = new SelettoreData( gDataModifica,  mDataModifica, aDataModifica, Year.of(1908), Year.now());
      setModalita(INIZIO);
      setFrameTable(tabCommento);
      setNomeTabella("Commento");
   }

   /**
    * Imposta lo stato corrente del form. <br> In base allo stato vengono
    * abilitati o disabilitati alcuni oggetti del form.
    * 
    * @param modo intero che rappresenta lo stato
    */
   @Override
   final public void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
          case INIZIO:
            tDescrizione.setEnabled (false);
            tCodiceC.setEnabled(false);
            tCodice.setEnabled(false);
            dataInserimento.setEnabled(false);
            dataModifica.setEnabled(false);
            break;
         case APPEND_QUERY:
            tDescrizione.setEnabled (true);
            tCodiceC.setEnabled(true);
            tCodice.setEnabled(true);
            dataInserimento.setEnabled(true);
            dataModifica.setEnabled(false);
            break;
         case BROWSE:
            tDescrizione.setEnabled (false);
            tCodiceC.setEnabled(false);
            tCodice.setEnabled(false);
            dataInserimento.setEnabled(false);
            dataModifica.setEnabled(false);
            break;
         case UPDATE:
            tDescrizione.setEnabled (true);
            tCodiceC.setEnabled(false);
            tCodice.setEnabled(true);
            dataInserimento.setEnabled(true);
            dataModifica.setEnabled(true);
            break;
      }
   }

   /**
    * Mostra una descrizione di un errore SQL in un linguaggio comprensibile per
    * l'utente finale.
    * 
    * @param e eccezione SQLException catturata
    * @param query l'istruzione SQL che ha causato l'errore
    * @param contesto intero per distinguere se l'eccezione ha avuto origine
    * da una query
    */
   @Override
   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi√† un'altro Commento con lo stesso CodiceC";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   
    
   /**
    * Metodo da usare nei form di lookup per passare i dati al form
    * chiamante.
    */
   @Override
   protected void premutoOK() {
      if (getPadre() != null) {
         try {
            rs.close();
         } catch (SQLException e) {
            mostraErrori(e);
         }
         dispose();
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jDataModifica = new javax.swing.JLabel();
        jDescrizione = new javax.swing.JLabel();
        jCodiceC = new javax.swing.JLabel();
        tDescrizione = new javax.swing.JTextField();
        spCommento = new javax.swing.JScrollPane();
        tabCommento = new javax.swing.JTable();
        jCodice = new javax.swing.JLabel();
        jDataInserimento = new javax.swing.JLabel();
        tCodiceC = new javax.swing.JTextField();
        tCodice = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        gDataInserimento = new javax.swing.JComboBox<>();
        mDataInserimento = new javax.swing.JComboBox<>();
        aDataInserimento = new javax.swing.JComboBox<>();
        gDataModifica = new javax.swing.JComboBox<>();
        mDataModifica = new javax.swing.JComboBox<>();
        aDataModifica = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Commento");
        setBackground(new java.awt.Color(102, 255, 255));
        setLocation(new java.awt.Point(640, 480));

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(102, 255, 255));

        jDataModifica.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jDataModifica.setForeground(new java.awt.Color(255, 255, 255));
        jDataModifica.setText("DataModifica");

        jDescrizione.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jDescrizione.setForeground(new java.awt.Color(255, 255, 255));
        jDescrizione.setText("Descrizione");

        jCodiceC.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jCodiceC.setForeground(new java.awt.Color(255, 255, 255));
        jCodiceC.setText("CodiceC");

        tDescrizione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tDescrizioneActionPerformed(evt);
            }
        });

        tabCommento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null,null},
                {null, null, null, null,null},
                {null, null, null, null,null},
                {null, null, null, null,null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4" , "Title 5"
            }
        ));
        spCommento.setViewportView(tabCommento);

        jCodice.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jCodice.setForeground(new java.awt.Color(255, 255, 255));
        jCodice.setText("Codice");

        jDataInserimento.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        jDataInserimento.setForeground(new java.awt.Color(255, 255, 255));
        jDataInserimento.setText("DataInserimento");

        tCodice.setText("Chiave esterna ClassDiagram");

        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("*");

        gDataInserimento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5","6","7","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31" }));
        gDataInserimento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gDataInserimentoItemStateChanged(evt);
            }
        });

        mDataInserimento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre" }));
        mDataInserimento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mDataInserimentoItemStateChanged(evt);
            }
        });

        aDataInserimento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0000" }));

        gDataModifica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5","6","7","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31" }));
        gDataModifica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gDataModificaItemStateChanged(evt);
            }
        });

        mDataModifica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre" }));
        mDataModifica.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mDataModificaItemStateChanged(evt);
            }
        });

        aDataModifica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0000" }));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(92, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jCodice)
                            .add(jDataInserimento)
                            .add(jCodiceC)
                            .add(jDescrizione)
                            .add(jDataModifica))
                        .add(67, 67, 67)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(tDescrizione, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                                .add(tCodiceC)
                                .add(tCodice))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(gDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(mDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                        .add(aDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(gDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(mDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(aDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel1)))
                        .add(278, 278, 278))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(spCommento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 869, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(68, 68, 68))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(165, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jDescrizione)
                    .add(tDescrizione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCodiceC)
                    .add(tCodiceC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCodice))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jDataInserimento)
                    .add(gDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(aDataInserimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jDataModifica)
                    .add(jLabel1)
                    .add(gDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(aDataModifica, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(34, 34, 34)
                .add(spCommento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 226, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(21, 21, 21))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tDescrizioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tDescrizioneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tDescrizioneActionPerformed

    private void gDataInserimentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gDataInserimentoItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataInserimento.cambiatoGiorno();
      }
    }//GEN-LAST:event_gDataInserimentoItemStateChanged

    private void mDataInserimentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mDataInserimentoItemStateChanged
    if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataInserimento.cambiatoMese();
      }

    }//GEN-LAST:event_mDataInserimentoItemStateChanged

    private void gDataModificaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gDataModificaItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataModifica.cambiatoGiorno();
      }
    }//GEN-LAST:event_gDataModificaItemStateChanged

    private void mDataModificaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mDataModificaItemStateChanged
     if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataModifica.cambiatoMese();
      }    }//GEN-LAST:event_mDataModificaItemStateChanged
                                         

    
   /**
    * Ricopia i dati della riga selezionata del JTable
    * sugli altri controlli della finestra.
    */
   @Override
   protected void mostraDati() {
      try {
         rs.previous(); rs.next();
         tDescrizione.setText(rs.getString("Descrizione"));
         tCodiceC.setText(rs.getString("CodiceC"));
         tCodice.setText(rs.getString("Codice"));
         dataInserimento.setDate(rs.getDate("DataInserimento"));
         dataModifica.setDate(rs.getDate("DataModifica"));
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   /**
    * Cancella i dati presenti in tutti i controlli presenti sul form.
    */
   @Override
   protected void pulisci() {
      super.pulisci();
      tDescrizione.setText("");
      tCodiceC.setText("");
      tCodice.setText("");
      LocalDate d = null;
      dataInserimento.setDate(d);
      dataModifica.setDate(d);
   }

   /**
    * Forma una query corrispondente ai dati inseriti nei
    * controlli della finestra.
    * 
    * @return query, come {@link PreparedStatement}
    */
   @Override
   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st;
      String  descrizione, codicec, codice ;
      Pattern pat;
      Matcher matc;
	  LocalDate inserimento, modifica;
      int k = 1;
      super.creaSelectStatement();
      descrizione = tDescrizione.getText();
      codicec = String.valueOf(tCodiceC.getText());
      codice = tCodice.getText();
      inserimento = dataInserimento.getDate();
      modifica = dataModifica.getDate();
      query += " where";
      
      if (descrizione.length() > 0) {
         if (descrizione.contains("%")) {
            query += " Descrizione like ? and";
         } else {
            query += " Descrizione = ? and";
         }
      }
      
      if (codicec.length() > 0) {
         query += " CodiceC= ? and";
      }
      
      if (codice.length() > 0) {
         if (codice.contains("%")) {
            query += " Codice like ? and";
         } else {
            query += " Codice = ? and";
         }
      }
     if (inserimento != null) {
            query += " DataInserimento = ?";
         }
     
      pat = Pattern.compile("where$|and$"); //cancella where o and finali
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (descrizione.length() > 0) {
            st.setString(k++, descrizione);
         }
         if (codicec.length() > 0) {
            st.setInt(k++, Integer.decode(codicec));
         }
         if (codice.length() > 0) {
            st.setString(k++, codice);
         }
         if (inserimento != null) {
            st.setDate(k++, Date.valueOf(inserimento));
         }
         return st;
      } catch (SQLException e) {
         mostraErrori(e);
         return null;
      }
   }

   /**
    * Prepara il comando SQL di inserimento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoInserimento(Connection c)
        throws SQLException {
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + Database.schema + ".Commento (Descrizione,"
                + "CodiceC,Codice,DataInserimento) values(?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        st.setString(1, tDescrizione.getText());
        st.setString(2, String.valueOf(tCodiceC.getText()));
        st.setString(3, tCodice.getText());
       LocalDate inserimento = dataInserimento.getDate();
        if (inserimento == null) st.setDate(4, null);
        else st.setDate(4, Date.valueOf(dataInserimento.getDate()));
   
        return st;
   }

   /**
    * Prepara il comando SQL di aggiornamento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoAggiornamento ( Connection c) throws SQLException {
       String cmdUp;
       PreparedStatement st;
       cmdUp = "update " + Database.schema + ".Commento set Descrizione=?,"
               + "Codice=?,DataInserimento=? where CodiceC=?";
       st = c.prepareStatement(cmdUp);
       st.setString(4, String.valueOf(tCodiceC.getText()));
       st.setString(1, tDescrizione.getText());
       st.setString(2, tCodice.getText());
       LocalDate inserimento = dataInserimento.getDate();
      if (inserimento == null) st.setDate(3, null);
      else st.setDate(3, Date.valueOf(dataInserimento.getDate()));
    
       return st;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> aDataInserimento;
    private javax.swing.JComboBox<String> aDataModifica;
    private javax.swing.JComboBox<String> gDataInserimento;
    private javax.swing.JComboBox<String> gDataModifica;
    private javax.swing.JLabel jCodice;
    private javax.swing.JLabel jCodiceC;
    private javax.swing.JLabel jDataInserimento;
    private javax.swing.JLabel jDataModifica;
    private javax.swing.JLabel jDescrizione;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> mDataInserimento;
    private javax.swing.JComboBox<String> mDataModifica;
    private javax.swing.JScrollPane spCommento;
    private javax.swing.JTextField tCodice;
    private javax.swing.JTextField tCodiceC;
    private javax.swing.JTextField tDescrizione;
    private javax.swing.JTable tabCommento;
    // End of variables declaration//GEN-END:variables



   @Override
   protected void getComandoElimina(Connection c)
    throws SQLException {
        String cmd;
        cmd = "delete from " + Database.schema + "." + "Commento"
               + " where CodiceC=?";
        try {
            Connection conn = Database.getDefaultConnection();
            PreparedStatement st = conn.prepareStatement(cmd);
            st.setString(1, String.valueOf((tCodiceC.getText())));
            st.executeUpdate();
            } catch (SQLException e) {
             mostraErrori(e);
        }     
   }
}