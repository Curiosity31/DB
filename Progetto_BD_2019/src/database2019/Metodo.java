/*
 * DBFrame.java
 */
package database2019;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;

public class Metodo extends DBFrame {

   public Metodo() {
      super();
      initComponents();
      setModalita(INIZIO);
      setFrameTable(tabMetodo);
      setNomeTabella("Metodo");
   }

   /**
    * Imposta lo stato corrente del form. <br> In base allo stato vengono
    * abilitati o disabilitati alcuni oggetti del form.
    * 
    * @param modo intero che rappresenta lo stato
    */
   @Override
   final public void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
          case INIZIO:
            tSegnatura.setEnabled (false);
            tNome.setEnabled(false);
            tModifyAcc.setEnabled(false);
            tCorpo.setEnabled(false);
            tCodiceT.setEnabled(false);
	    tIdC.setEnabled(false);
	    tProcedura.setEnabled(false);
            tFunzione.setEnabled(false);
            break;
         case APPEND_QUERY:
            tSegnatura.setEnabled (true);
            tNome.setEnabled(true);
            tModifyAcc.setEnabled(true);
            tCorpo.setEnabled(true);
            tCodiceT.setEnabled(true);
	    tIdC.setEnabled(true);
	    tProcedura.setEnabled(true);
            tFunzione.setEnabled(true);
            break;
         case BROWSE:
            tSegnatura.setEnabled (false);
            tNome.setEnabled(false);
            tModifyAcc.setEnabled(false);
            tCorpo.setEnabled(false);
            tCodiceT.setEnabled(false);
	    tIdC.setEnabled(false);
	    tProcedura.setEnabled(false);
            tFunzione.setEnabled(false);
            break;
         case UPDATE:
             tSegnatura.setEnabled (false);
            tNome.setEnabled(true);
            tModifyAcc.setEnabled(true);
            tCorpo.setEnabled(true);
            tCodiceT.setEnabled(true);
	    tIdC.setEnabled(true);
	    tProcedura.setEnabled(true);
            tFunzione.setEnabled(true);
            break;
      }
   }

   /**
    * Mostra una descrizione di un errore SQL in un linguaggio comprensibile per
    * l'utente finale.
    * 
    * @param e eccezione SQLException catturata
    * @param query l'istruzione SQL che ha causato l'errore
    * @param contesto intero per distinguere se l'eccezione ha avuto origine
    * da una query
    */
   @Override
   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste già un'altro Metodo con la stessa Segnatura";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   /**
    * Metodo da usare nei form di lookup per passare i dati al form
    * chiamante.
    */
   @Override
   protected void premutoOK() {
      if (getPadre() != null) {
         try {
            rs.close();
         } catch (SQLException e) {
            mostraErrori(e);
         }
         dispose();
      }
   }


   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jModifyAcc = new javax.swing.JLabel();
        jSegnatura = new javax.swing.JLabel();
        spMetodo = new javax.swing.JScrollPane();
        tabMetodo = new javax.swing.JTable();
        jCorpo = new javax.swing.JLabel();
        tSegnatura = new javax.swing.JTextField();
        tCodiceT = new javax.swing.JTextField();
        tCorpo = new javax.swing.JTextField();
        jNome = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        jProcedura = new javax.swing.JLabel();
        jIdC = new javax.swing.JLabel();
        jFunzione = new javax.swing.JLabel();
        jCodiceT = new javax.swing.JLabel();
        tProcedura = new javax.swing.JTextField();
        tIdC = new javax.swing.JTextField();
        tFunzione = new javax.swing.JTextField();
        tModifyAcc = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Metodo");
        setBackground(new java.awt.Color(102, 255, 255));
        setLocation(new java.awt.Point(640, 480));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(102, 255, 255));

        jModifyAcc.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jModifyAcc.setForeground(new java.awt.Color(255, 255, 255));
        jModifyAcc.setText("ModifyAcc");

        jSegnatura.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jSegnatura.setForeground(new java.awt.Color(255, 255, 255));
        jSegnatura.setText("Segnatura");

        tabMetodo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null ,null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8"
            }
        ));
        spMetodo.setViewportView(tabMetodo);

        jCorpo.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jCorpo.setForeground(new java.awt.Color(255, 255, 255));
        jCorpo.setText("Corpo");

        tSegnatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tSegnaturaActionPerformed(evt);
            }
        });

        tCodiceT.setText("Chiave Esterna Tipo");
        tCodiceT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCodiceTActionPerformed(evt);
            }
        });

        tCorpo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCorpoActionPerformed(evt);
            }
        });

        jNome.setBackground(new java.awt.Color(255, 255, 255));
        jNome.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jNome.setForeground(new java.awt.Color(255, 255, 255));
        jNome.setText("Nome");

        tNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tNomeActionPerformed(evt);
            }
        });

        jProcedura.setBackground(new java.awt.Color(255, 255, 255));
        jProcedura.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jProcedura.setForeground(new java.awt.Color(255, 255, 255));
        jProcedura.setText("Procedura");

        jIdC.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jIdC.setForeground(new java.awt.Color(255, 255, 255));
        jIdC.setText("IdC");

        jFunzione.setBackground(new java.awt.Color(255, 255, 255));
        jFunzione.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jFunzione.setForeground(new java.awt.Color(255, 255, 255));
        jFunzione.setText("Funzione");

        jCodiceT.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jCodiceT.setForeground(new java.awt.Color(255, 255, 255));
        jCodiceT.setText("CodiceT");

        tProcedura.setText("1 Se è una procedura, 0 altrimenti");
        tProcedura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tProceduraActionPerformed(evt);
            }
        });

        tIdC.setText("Chiave Esterna Classe");
        tIdC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tIdCActionPerformed(evt);
            }
        });

        tFunzione.setText("1 Se è una funzione, 0 altrimenti");

        tModifyAcc.setText("Modificatore di accesso");
        tModifyAcc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tModifyAccActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("*");

        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("*");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .add(spMetodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 962, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(115, 115, 115)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jNome)
                        .add(44, 44, 44)
                        .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jSegnatura)
                        .add(44, 44, 44)
                        .add(tSegnatura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jCorpo)
                            .add(jModifyAcc))
                        .add(44, 44, 44)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tCorpo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, tModifyAcc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(117, 117, 117)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jCodiceT)
                            .add(jIdC)
                            .add(jProcedura)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jFunzione)))
                .add(50, 50, 50)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(tFunzione)
                    .add(tIdC)
                    .add(tProcedura)
                    .add(tCodiceT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel2)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(196, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tSegnatura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jSegnatura)
                    .add(tCodiceT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCodiceT)
                    .add(jLabel2))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jNome)
                    .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(tIdC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jIdC))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(tProcedura, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jModifyAcc)
                        .add(tModifyAcc, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jProcedura))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jFunzione)
                        .add(tFunzione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jCorpo))
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(tCorpo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel1)))
                .add(35, 35, 35)
                .add(spMetodo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(26, 26, 26))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
/*
    private void tCodiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCodiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tCodiceActionPerformed

    private void tDataAggiornamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tDataAggiornamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tDataAggiornamentoActionPerformed
*/
    private void tCorpoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCorpoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tCorpoActionPerformed

    private void tNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tNomeActionPerformed

    private void tSegnaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSegnaturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tSegnaturaActionPerformed

    private void tCodiceTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCodiceTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tCodiceTActionPerformed

    private void tProceduraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tProceduraActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tProceduraActionPerformed

    private void tIdCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tIdCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tIdCActionPerformed

    private void tModifyAccActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tModifyAccActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tModifyAccActionPerformed

   /**
    * Ricopia i dati della riga selezionata del JTable
    * sugli altri controlli della finestra.
    */
   @Override
   protected void mostraDati() {
      try {
            rs.previous(); rs.next();
	    tSegnatura.setText(rs.getString("Segnatura"));
            tNome.setText(rs.getString("Nome"));
            tModifyAcc.setText(rs.getString("ModifyAcc"));
            tCorpo.setText(rs.getString("Corpo"));
            tCodiceT.setText(rs.getString("CodiceT"));
            tIdC.setText(rs.getString("IdC"));
            tProcedura.setText(rs.getString("Procedura"));
            tFunzione.setText(rs.getString("Funzione"));
		
        
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   /**
    * Cancella i dati presenti in tutti i controlli presenti sul form.
    */
   @Override
   protected void pulisci() {
      super.pulisci();
      tSegnatura.setText("");
      tNome.setText("");
      tModifyAcc.setText("");
      tCorpo.setText("");
      tCodiceT.setText("");
      tIdC.setText("");
      tProcedura.setText("");
      tFunzione.setText("");
     
   }
   /**
    * Forma una query corrispondente ai dati inseriti nei
    * controlli della finestra.
    * 
    * @return query, come {@link PreparedStatement}
    */
   @Override
   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st;
      String  segnatura, nome,modifyacc, corpo, codicet,idc,procedura,funzione;
      Pattern pat;
      Matcher matc;
      int k = 1;
      super.creaSelectStatement();
      segnatura = tSegnatura.getText();
      nome= tNome.getText();
      modifyacc = tModifyAcc.getText();
      corpo = tCorpo.getText();
      codicet = String.valueOf(tCodiceT.getText());
      idc = String.valueOf(tIdC.getText());
      procedura= String.valueOf(tProcedura.getText());
      funzione = String.valueOf(tFunzione.getText());
     

      query += " where";
      //}
      if (segnatura.length() > 0) {
         query += " Segnatura= ? and";
      }
      if (nome.length() > 0) {
         if (nome.contains("%")) {
            query += " Nome like ? and";
         } else {
            query += " Nome = ? and";
         }
      }
	  if (modifyacc.length() > 0) {
         if (modifyacc.contains("%")) {
            query += " ModifyAcc like ? and";
         } else {
            query += " ModifyAcc = ? and";
         }
      }
	  if (corpo.length() > 0) {
         if (corpo.contains("%")) {
            query += " Corpo like ? and";
         } else {
            query += " Corpo = ? and";
         }
      }
	  if (codicet.length() > 0) {
         if (codicet.contains("%")) {
            query += " CodiceT like ? and";
         } else {
            query += " CodiceT = ? and";
         }
      }
	  if (idc.length() > 0) {
         if (idc.contains("%")) {
            query += " IdC like ? and";
         } else {
            query += " IdC = ? and";
         }
      }
	  if (procedura.length() > 0) {
         if (procedura.contains("%")) {
            query += " Procedura like ? and";
         } else {
            query += " Procedura = ? and";
         }
      }
      if (funzione.length() > 0) {
         if (funzione.contains("%")) {
            query += " Funzione like ? and";
         } else {
            query += " Funzione = ? and";
         }
      }
      pat = Pattern.compile("where$|and$"); //cancella where o and finali
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (segnatura.length() > 0) {
            st.setString(k++, segnatura);
         }
         if (nome.length() > 0) {
            st.setString(k++, nome);
         }
	 if (modifyacc.length() > 0) {
             st.setString(k++, modifyacc);
         }
         if (corpo.length() > 0) {
            st.setString(k++, corpo);
         }
	 if (codicet.length() > 0) {
             st.setString(k++, codicet);
         }
	 if (idc.length() > 0) {
            st.setString(k++, idc);
	 }
         if (procedura.length() > 0) {
             st.setString(k++, procedura);
         }
         if (funzione.length() > 0) {
            st.setString(k++, funzione);
         }
         return st;
      } catch (SQLException e) {
         mostraErrori(e);
         return null;
      }
   }

   /**
    * Prepara il comando SQL di inserimento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoInserimento(Connection c)
        throws SQLException {
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + Database.schema + ".Metodo (Segnatura,Nome,"
                + "ModifyAcc,Corpo,CodiceT,IdC,Procedura,Funzione) values(?,?,?,?,?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        st.setString(1, tSegnatura.getText());
        st.setString(2, tNome.getText());
        st.setString(3, tModifyAcc.getText());
        st.setString(4, tCorpo.getText());   
        st.setString(5, String.valueOf(tCodiceT.getText()));
        st.setString(6, String.valueOf(tIdC.getText()));
	st.setString(7, String.valueOf(tProcedura.getText()));
        st.setString(8, String.valueOf(tFunzione.getText()));
        
        return st;
   }

   /**
    * Prepara il comando SQL di aggiornamento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoAggiornamento ( Connection c) throws SQLException {
       String cmdUp;
       PreparedStatement st;
       cmdUp = "update " + Database.schema + ".Metodo set Nome=?,ModifyAcc=?,"
               + "Corpo=?,CodiceT=?,IdC=?,Procedura=?,Funzione=? where Segnatura=?" ;
       st = c.prepareStatement(cmdUp);
       st.setString(8, tSegnatura.getText());
       st.setString(1, tNome.getText());
       st.setString(2, tModifyAcc.getText());
       st.setString(3, tCorpo.getText());
       st.setString(4, String.valueOf(tCodiceT.getText()));
       st.setString(5, String.valueOf(tIdC.getText()));
       st.setString(6, String.valueOf(tProcedura.getText()));
       st.setString(7, String.valueOf(tFunzione.getText()));
      
       return st;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jCodiceT;
    private javax.swing.JLabel jCorpo;
    private javax.swing.JLabel jFunzione;
    private javax.swing.JLabel jIdC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jModifyAcc;
    private javax.swing.JLabel jNome;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jProcedura;
    private javax.swing.JLabel jSegnatura;
    private javax.swing.JScrollPane spMetodo;
    private javax.swing.JTextField tCodiceT;
    private javax.swing.JTextField tCorpo;
    private javax.swing.JTextField tFunzione;
    private javax.swing.JTextField tIdC;
    private javax.swing.JTextField tModifyAcc;
    private javax.swing.JTextField tNome;
    private javax.swing.JTextField tProcedura;
    private javax.swing.JTextField tSegnatura;
    private javax.swing.JTable tabMetodo;
    // End of variables declaration//GEN-END:variables



   @Override
   protected void getComandoElimina(Connection c)
    throws SQLException {
        String cmd;
        cmd = "delete from " + Database.schema + "." + "Metodo"
               + " where Segnatura=?";
        try {
            Connection conn = Database.getDefaultConnection();
            PreparedStatement st = conn.prepareStatement(cmd);
            st.setString(1, tSegnatura.getText());
            st.executeUpdate();
            } catch (SQLException e) {
             mostraErrori(e);
        }     
   }
}