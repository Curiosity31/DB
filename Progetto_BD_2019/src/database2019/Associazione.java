/*
 * DBFrame.java
 */
package database2019;

import java.sql.*;
import javax.swing.*;
import java.util.regex.*;

public class Associazione extends DBFrame {

   public Associazione() {
      super();
      initComponents();
      setModalita(INIZIO);
      setFrameTable(tabAssociazione);
      setNomeTabella("Associazione");
   }

   /**
    * Imposta lo stato corrente del form. <br> In base allo stato vengono
    * abilitati o disabilitati alcuni oggetti del form.
    * 
    * @param modo intero che rappresenta lo stato
    */
   @Override
   final public void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
          case INIZIO:
            tCodAss.setEnabled (false);
            tNomeAss.setEnabled(false);
            tGrado.setEnabled(false);
            tCodice.setEnabled(false);
            tIdAss.setEnabled(false);
            break;
         case APPEND_QUERY:
            tCodAss.setEnabled (true);
            tNomeAss.setEnabled(true);
            tGrado.setEnabled(true);
            tCodice.setEnabled(true);
            tIdAss.setEnabled(true);
            break;
         case BROWSE:
            tCodAss.setEnabled (false);
            tNomeAss.setEnabled(false);
            tGrado.setEnabled(false);
            tCodice.setEnabled(false);
            tIdAss.setEnabled(false);
            break;
         case UPDATE:
           tCodAss.setEnabled (false);
            tNomeAss.setEnabled(true);
            tGrado.setEnabled(true);
            tCodice.setEnabled(true);
            tIdAss.setEnabled(true);
            break;
      }
   }

   /**
    * Mostra una descrizione di un errore SQL in un linguaggio comprensibile per
    * l'utente finale.
    * 
    * @param e eccezione SQLException catturata
    * @param query l'istruzione SQL che ha causato l'errore
    * @param contesto intero per distinguere se l'eccezione ha avuto origine
    * da una query
    */
   @Override
   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi√† un'altra Associazione con lo stesso CodAss";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }

   /**
    * Metodo da usare nei form di lookup per passare i dati al form
    * chiamante.
    */
   @Override
   protected void premutoOK() {
      if (getPadre() != null) {
         try {
            rs.close();
         } catch (SQLException e) {
            mostraErrori(e);
         }
         dispose();
      }
   }



   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jIdAss = new javax.swing.JLabel();
        jCodAss = new javax.swing.JLabel();
        jNomeAss = new javax.swing.JLabel();
        tCodAss = new javax.swing.JTextField();
        spAssociazione = new javax.swing.JScrollPane();
        tabAssociazione = new javax.swing.JTable();
        jGrado = new javax.swing.JLabel();
        jCodice = new javax.swing.JLabel();
        tNomeAss = new javax.swing.JTextField();
        tGrado = new javax.swing.JTextField();
        tCodice = new javax.swing.JTextField();
        tIdAss = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Associazione");
        setBackground(new java.awt.Color(102, 255, 255));
        setLocation(new java.awt.Point(640, 480));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(255, 51, 51));

        jIdAss.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jIdAss.setForeground(new java.awt.Color(255, 255, 255));
        jIdAss.setText("IdAss");

        jCodAss.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jCodAss.setForeground(new java.awt.Color(255, 255, 255));
        jCodAss.setText("CodAss");

        jNomeAss.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jNomeAss.setForeground(new java.awt.Color(255, 255, 255));
        jNomeAss.setText("NomeAss");

        tCodAss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCodAssActionPerformed(evt);
            }
        });

        tabAssociazione.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null,null},
                {null, null, null, null,null},
                {null, null, null, null,null},
                {null, null, null, null,null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4" , "Title 5"
            }
        ));
        spAssociazione.setViewportView(tabAssociazione);

        jGrado.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jGrado.setForeground(new java.awt.Color(255, 255, 255));
        jGrado.setText("Grado");

        jCodice.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jCodice.setForeground(new java.awt.Color(255, 255, 255));
        jCodice.setText("Codice");

        tCodice.setText("Chiave esterna ClassDiagram");

        tIdAss.setText("Chiave esterna Classe_Di_Associazione");
        tIdAss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tIdAssActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("*");

        jLabel2.setFont(new java.awt.Font("Arial", 3, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("*");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(84, Short.MAX_VALUE)
                .add(spAssociazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 860, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jGrado)
                    .add(jCodice)
                    .add(jNomeAss)
                    .add(jCodAss)
                    .add(jIdAss))
                .add(67, 67, 67)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(tCodAss)
                    .add(tNomeAss)
                    .add(tGrado)
                    .add(tCodice)
                    .add(tIdAss, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 385, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(42, 42, 42)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2)
                    .add(jLabel1))
                .add(263, 263, 263))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(165, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCodAss)
                    .add(tCodAss, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jNomeAss)
                    .add(tNomeAss, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tGrado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jGrado))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jCodice))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tIdAss, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jIdAss)
                    .add(jLabel2))
                .add(37, 37, 37)
                .add(spAssociazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 218, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(26, 26, 26))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tCodAssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCodAssActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tCodAssActionPerformed

    private void tIdAssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tIdAssActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tIdAssActionPerformed

   /**
    * Ricopia i dati della riga selezionata del JTable
    * sugli altri controlli della finestra.
    */
   @Override
    protected void mostraDati() {
      try {
            rs.previous(); rs.next();
            tCodAss.setText(rs.getString("CodAss"));
            tNomeAss.setText(rs.getString("NomeAss"));
            tGrado.setText(rs.getString("Grado"));
            tCodice.setText(rs.getString("Codice"));
            tIdAss.setText(rs.getString("IdAss"));
			
        
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   /**
    * Cancella i dati presenti in tutti i controlli presenti sul form.
    */
   @Override
    protected void pulisci() {
      super.pulisci();
        tCodAss.setText("");
        tNomeAss.setText("");
        tGrado.setText("");
        tCodice.setText("");
        tIdAss.setText("");
        
   }

   /**
    * Forma una query corrispondente ai dati inseriti nei
    * controlli della finestra.
    * 
    * @return query, come {@link PreparedStatement}
    */
   @Override
   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st;
      String   codass, nomeass, grado, codice, idass;
      Pattern pat;
      Matcher matc;
      int k = 1;
      super.creaSelectStatement();
      codass = String.valueOf(tCodAss.getText());
      nomeass = tNomeAss.getText();
      grado = String.valueOf(tGrado.getText());
      codice = tCodice.getText();
      idass = String.valueOf(tIdAss.getText());

      query += " where";
     
      if (codass.length() > 0) {
         query += " CodAss= ? and";
      }
      if (nomeass.length() > 0) {
         if (nomeass.contains("%")) {
            query += " NomeAss like ? and";
         } else {
            query += " NomeAss = ? and";
         }
      }
      if (grado.length() > 0) {
         if (grado.contains("%")) {
            query += " Grado like ? and";
         } else {
            query += " Grado= ? and";
         }
      }
      if (codice.length() > 0) {
         if (codice.contains("%")) {
            query += " Codice like ? and";
         } else {
            query += " Codice = ? and";
         }
      }
      if (idass.length() > 0) {
         if (idass.contains("%")) {
            query += " IdAss like ? and";
         } else {
            query += " IdAss = ? and";
         }
      }
      pat = Pattern.compile("where$|and$"); //cancella where o and finali
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (codass.length() > 0) {
            st.setString(k++, codass);
         }
         if (nomeass.length() > 0) {
            st.setString(k++, nomeass);
         }
         if (grado.length() > 0) {
            st.setString(k++, grado);
         }
         if (codice.length() > 0) {
            st.setString(k++, codice);
         }
         if (idass.length() > 0) {
            st.setString(k++, idass);
         }
         return st;
      } catch (SQLException e) {
         mostraErrori(e);
         return null;
      }
   }

   /**
    * Prepara il comando SQL di inserimento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoInserimento(Connection c)
        throws SQLException {
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + Database.schema + ".Associazione(CodAss,"
                + "NomeAss,Grado,Codice,IdAss)  values(?,?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        st.setString (1, String.valueOf(tCodAss.getText()));
        st.setString (2, tNomeAss.getText());
        st.setString (3, String.valueOf(tGrado.getText()));
        st.setString (4, tCodice.getText());
        st.setString (5, String.valueOf(tIdAss.getText()));
        return st;
   }

   /**
    * Prepara il comando SQL di aggiornamento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoAggiornamento (Connection c) throws SQLException {
       String cmdUp;
       PreparedStatement st;
       cmdUp = "update " + Database.schema + ".Associazione set NomeAss=?,"
               + "Grado=?,Codice=?,IdAss=? where CodAss=?";
       st = c.prepareStatement(cmdUp);
       st.setInt (5, Integer.valueOf(tCodAss.getText()));
       st.setString(1, tNomeAss.getText());
       st.setString(2, String.valueOf(tGrado.getText()));
       st.setString(3, tCodice.getText());
       st.setString(4, String.valueOf(tIdAss.getText()));
       return st;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jCodAss;
    private javax.swing.JLabel jCodice;
    private javax.swing.JLabel jGrado;
    private javax.swing.JLabel jIdAss;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jNomeAss;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane spAssociazione;
    private javax.swing.JTextField tCodAss;
    private javax.swing.JTextField tCodice;
    private javax.swing.JTextField tGrado;
    private javax.swing.JTextField tIdAss;
    private javax.swing.JTextField tNomeAss;
    private javax.swing.JTable tabAssociazione;
    // End of variables declaration//GEN-END:variables



   @Override
   protected void getComandoElimina(Connection c)
    throws SQLException {
        String cmd;
        cmd = "delete from " + Database.schema + "." + "Associazione"
               + " where CodAss=?";
        try {
            Connection conn = Database.getDefaultConnection();
            PreparedStatement st = conn.prepareStatement(cmd);
            st.setString(1, tCodAss.getText());
            st.executeUpdate();
            } catch (SQLException e) {
             mostraErrori(e);
        }     
   }
}