/*
 * DBFrame.java 
 */
package database2019;

import java.awt.event.ItemEvent;
import java.sql.*;
import javax.swing.*;
import java.util.regex.*;
import java.time.Year;
import java.time.LocalDate;

public class ClassDiagram extends DBFrame {

   private final SelettoreData dataCreazione, dataAggiornamento;
    
   public ClassDiagram() {
      super();
      initComponents();
      dataCreazione = new SelettoreData(gDataCreazione, mDataCreazione,  aDataCreazione, Year.of(1908), Year.now());
      dataAggiornamento = new SelettoreData( gDataAggiornamento,  mDataAggiornamento, aDataAggiornamento, Year.of(1908), Year.now());
      setModalita(INIZIO);
      setFrameTable(tabClassDiagram);
      setNomeTabella("ClassDiagram");
   }

   /**
    * Imposta lo stato corrente del form. <br> In base allo stato vengono
    * abilitati o disabilitati alcuni oggetti del form.
    * 
    * @param modo intero che rappresenta lo stato
    */
   @Override
   final public void setModalita(int modo) {
      super.setModalita(modo);
      switch (modo) {
          case INIZIO:
            tCodice.setEnabled (false);
            tNome.setEnabled(false);
            tFileC.setEnabled(false);
            dataCreazione.setEnabled(false);
            dataAggiornamento.setEnabled(false);
            break;
         case APPEND_QUERY:
            tCodice.setEnabled (true);
            tNome.setEnabled(true);
            tFileC.setEnabled(true);
            dataCreazione.setEnabled(true);
            dataAggiornamento.setEnabled(false);
            break;
         case BROWSE:
            tCodice.setEnabled(false);
            tNome.setEnabled(false);
            tFileC.setEnabled(false);
            dataCreazione.setEnabled(false);
            dataAggiornamento.setEnabled(false);
            break;
         case UPDATE:
            tCodice.setEnabled(false);
            tNome.setEnabled(true);
            tFileC.setEnabled(true);
            dataCreazione.setEnabled(true);
            dataAggiornamento.setEnabled(true);
            break;
      }
   }

   /**
    * Mostra una descrizione di un errore SQL in un linguaggio comprensibile per
    * l'utente finale.
    * 
    * @param e eccezione SQLException catturata
    * @param query l'istruzione SQL che ha causato l'errore
    * @param contesto intero per distinguere se l'eccezione ha avuto origine
    * da una query
    */
   @Override
   protected void mostraErrori(SQLException e, String query, int contesto) {
      String msg;
      if (e.getErrorCode() == 1) {
         msg = "Esiste gi√† un'altro Class Diagram con lo stesso Codice";
         JOptionPane.showMessageDialog(this, msg, "Errore",
                 JOptionPane.ERROR_MESSAGE);
      } else {
         super.mostraErrori(e, query, contesto);
      }
   }


   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jDataAggiornamento = new javax.swing.JLabel();
        jCodice = new javax.swing.JLabel();
        jNome = new javax.swing.JLabel();
        tCodice = new javax.swing.JTextField();
        spClassDiagram = new javax.swing.JScrollPane();
        tabClassDiagram = new javax.swing.JTable();
        jFileC = new javax.swing.JLabel();
        jDataCreazione = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        tFileC = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        gDataCreazione = new javax.swing.JComboBox<>();
        mDataCreazione = new javax.swing.JComboBox<>();
        aDataCreazione = new javax.swing.JComboBox<>();
        gDataAggiornamento = new javax.swing.JComboBox<>();
        mDataAggiornamento = new javax.swing.JComboBox<>();
        aDataAggiornamento = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ClassDiagram");
        setBackground(new java.awt.Color(102, 255, 255));
        setLocation(new java.awt.Point(640, 480));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(102, 255, 255));

        jDataAggiornamento.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jDataAggiornamento.setForeground(new java.awt.Color(255, 255, 255));
        jDataAggiornamento.setText("DataAggiornamento");

        jCodice.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jCodice.setForeground(new java.awt.Color(255, 255, 255));
        jCodice.setText("Codice");

        jNome.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jNome.setForeground(new java.awt.Color(255, 255, 255));
        jNome.setText("Nome");

        tCodice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tCodiceActionPerformed(evt);
            }
        });

        tabClassDiagram.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null,null},
                {null, null, null, null,null},
                {null, null, null, null,null},
                {null, null, null, null,null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4" , "Title 5"
            }
        ));
        spClassDiagram.setViewportView(tabClassDiagram);

        jFileC.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jFileC.setForeground(new java.awt.Color(255, 255, 255));
        jFileC.setText("FileC");

        jDataCreazione.setFont(new java.awt.Font("Times New Roman", 3, 16)); // NOI18N
        jDataCreazione.setForeground(new java.awt.Color(255, 255, 255));
        jDataCreazione.setText("DataCreazione");

        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("*");

        gDataCreazione.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5","6","7","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31" }));
        gDataCreazione.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gDataCreazioneItemStateChanged(evt);
            }
        });
        gDataCreazione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gDataCreazioneActionPerformed(evt);
            }
        });

        mDataCreazione.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre" }));
        mDataCreazione.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mDataCreazioneItemStateChanged(evt);
            }
        });
        mDataCreazione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mDataCreazioneActionPerformed(evt);
            }
        });

        aDataCreazione.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0000" }));
        aDataCreazione.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aDataCreazioneActionPerformed(evt);
            }
        });

        gDataAggiornamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5","6","7","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31" }));
        gDataAggiornamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                gDataAggiornamentoItemStateChanged(evt);
            }
        });
        gDataAggiornamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gDataAggiornamentoActionPerformed(evt);
            }
        });

        mDataAggiornamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"  }));
        mDataAggiornamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mDataAggiornamentoItemStateChanged(evt);
            }
        });
        mDataAggiornamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mDataAggiornamentoActionPerformed(evt);
            }
        });

        aDataAggiornamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0000" }));
        aDataAggiornamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aDataAggiornamentoActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(99, Short.MAX_VALUE)
                .add(spClassDiagram, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 863, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(67, 67, 67))
            .add(jPanel1Layout.createSequentialGroup()
                .add(188, 188, 188)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jFileC)
                    .add(jDataCreazione)
                    .add(jNome)
                    .add(jCodice)
                    .add(jDataAggiornamento))
                .add(67, 67, 67)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(tCodice, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                        .add(tNome)
                        .add(tFileC))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(gDataAggiornamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mDataAggiornamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(aDataAggiornamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(28, 28, 28)
                        .add(jLabel1))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(gDataCreazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(mDataCreazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(aDataCreazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(252, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(165, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jCodice)
                    .add(tCodice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jNome)
                    .add(tNome, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(tFileC, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jFileC))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jDataCreazione)
                    .add(gDataCreazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mDataCreazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(aDataCreazione, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jDataAggiornamento)
                    .add(jLabel1)
                    .add(gDataAggiornamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(mDataAggiornamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(aDataAggiornamento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(42, 42, 42)
                .add(spClassDiagram, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(27, 27, 27))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tCodiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tCodiceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tCodiceActionPerformed

    private void gDataCreazioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gDataCreazioneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gDataCreazioneActionPerformed

    private void mDataCreazioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mDataCreazioneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mDataCreazioneActionPerformed

    private void mDataAggiornamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mDataAggiornamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mDataAggiornamentoActionPerformed

    private void gDataAggiornamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gDataAggiornamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gDataAggiornamentoActionPerformed

    private void aDataCreazioneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aDataCreazioneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aDataCreazioneActionPerformed

    private void aDataAggiornamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aDataAggiornamentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aDataAggiornamentoActionPerformed

    private void gDataCreazioneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gDataCreazioneItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataCreazione.cambiatoGiorno();
      }
    }//GEN-LAST:event_gDataCreazioneItemStateChanged

    private void mDataCreazioneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mDataCreazioneItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataCreazione.cambiatoMese();
      }
    }//GEN-LAST:event_mDataCreazioneItemStateChanged

    private void gDataAggiornamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_gDataAggiornamentoItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataAggiornamento.cambiatoGiorno();
      }
    }//GEN-LAST:event_gDataAggiornamentoItemStateChanged

    private void mDataAggiornamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mDataAggiornamentoItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
         dataAggiornamento.cambiatoMese();
      }
    }//GEN-LAST:event_mDataAggiornamentoItemStateChanged
  
    
    
   /**
    * Ricopia i dati della riga selezionata del JTable
    * sugli altri controlli della finestra.
    */
   @Override
   protected void mostraDati() {
      try {
         rs.previous(); rs.next();
         tCodice.setText(rs.getString("Codice"));
         tNome.setText(rs.getString("Nome"));
         tFileC.setText(rs.getString("FileC"));
         dataCreazione.setDate(rs.getDate("DataCreazione"));
         dataAggiornamento.setDate(rs.getDate("DataAggiornamento"));
      } catch (SQLException e) {
         mostraErrori(e);
      }
   }

   
    /**
    * Metodo da usare nei form di lookup per passare i dati al form
    * chiamante.
    */
   @Override
   protected void premutoOK() {
      if (getPadre() != null) {
         try {
            rs.close();
         } catch (SQLException e) {
            mostraErrori(e);
         }
         dispose();
      }
   }
   
   
   /**
    * Cancella i dati presenti in tutti i controlli presenti sul form.
    */
   @Override
   protected void pulisci() {
      super.pulisci();
      tCodice.setText("");
      tNome.setText("");
      tFileC.setText("");
      LocalDate d = null;
      dataCreazione.setDate(d);
      dataAggiornamento.setDate(d);
   }

   /**
    * Forma una query corrispondente ai dati inseriti nei
    * controlli della finestra.
    * 
    * @return query, come {@link PreparedStatement}
    */
   @Override
   protected PreparedStatement creaSelectStatement() {
      Connection con;
      PreparedStatement st;
      String  codice, nome, filec ;
      Pattern pat;
      Matcher matc;
      LocalDate creazione, aggiornamento ;
      int k = 1; // conta i parametri di ricerca
      super.creaSelectStatement();
      codice = tCodice.getText();
      nome = tNome.getText();
      filec = tFileC.getText();
      creazione = dataCreazione.getDate();
      aggiornamento = dataAggiornamento.getDate();
      query += " where";
      
      
      if (codice.length() > 0) {
         query += " Codice= ? and";
      }
      if (nome.length() > 0) {
         if (nome.contains("%")) {
            query += " Nome like ? and";
         } else {
            query += " Nome = ? and";
         }
      }
      if (filec.length() > 0) {
         if (filec.contains("%")) {
            query += " FileC like ? and";
         } else {
            query += " FileC = ? and";
         }
      }
      if (creazione != null) {
            query += " DataCreazione = ?";
         }

      pat = Pattern.compile("where$|and$");
      matc = pat.matcher(query);
      query = matc.replaceAll("");
      
      
      try {
         con = Database.getDefaultConnection();
         st = con.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE,
                 ResultSet.CONCUR_READ_ONLY);

         if (codice.length() > 0) {
            st.setString(k++, codice);
         }
         if (nome.length() > 0) {
            st.setString(k++, nome);
         }
         if (filec.length() > 0) {
            st.setString(k++, filec);
         }
         if (creazione != null) {
            st.setDate(k++, Date.valueOf(creazione));
         }
         return st;
      } catch (SQLException e) {
         mostraErrori(e);
         return null;
      }
   }

   /**
    * Prepara il comando SQL di inserimento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoInserimento(Connection c)
        throws SQLException {
        String cmdIns;
        PreparedStatement st;
        cmdIns = "insert into " + Database.schema + ".ClassDiagram (Codice,Nome,"
                + "FileC,DataCreazione)  values(?,?,?,?)";
        st = c.prepareStatement(cmdIns);
        st.setString(1, String.valueOf(tCodice.getText()));
        st.setString(2, tNome.getText());
        st.setString(3, tFileC.getText());
        
        LocalDate creazione = dataCreazione.getDate();
        if (creazione == null) st.setDate(4, null);
        else st.setDate(4, Date.valueOf(dataCreazione.getDate()));
 
        return st;
   }

   /**
    * Prepara il comando SQL di aggiornamento in base ai dati
    * inseriti nei controlli.
    * 
    * @param c la connessione al DB
    * @return il comando, come {@link PreparedStatement}
    * @throws SQLException in caso di errori nel preparare il
    * comando
    */
   
   @Override
    protected PreparedStatement getComandoAggiornamento ( Connection c) throws SQLException {
       String cmdUp;
       PreparedStatement st;
       cmdUp = "update " + Database.schema + ".ClassDiagram set Nome=?,FileC=?,"
               + "DataCreazione=? where Codice=?" ;
       st = c.prepareStatement(cmdUp);
       st.setString(4, String.valueOf(tCodice.getText()));
       st.setString(1, tNome.getText());
       st.setString(2, tFileC.getText());
       
       LocalDate creazione = dataCreazione.getDate();
      if (creazione == null) st.setDate(3, null);
      else st.setDate(3, Date.valueOf(dataCreazione.getDate()));

      return st;
   }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> aDataAggiornamento;
    private javax.swing.JComboBox<String> aDataCreazione;
    private javax.swing.JComboBox<String> gDataAggiornamento;
    private javax.swing.JComboBox<String> gDataCreazione;
    private javax.swing.JLabel jCodice;
    private javax.swing.JLabel jDataAggiornamento;
    private javax.swing.JLabel jDataCreazione;
    private javax.swing.JLabel jFileC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jNome;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> mDataAggiornamento;
    private javax.swing.JComboBox<String> mDataCreazione;
    private javax.swing.JScrollPane spClassDiagram;
    private javax.swing.JTextField tCodice;
    private javax.swing.JTextField tFileC;
    private javax.swing.JTextField tNome;
    private javax.swing.JTable tabClassDiagram;
    // End of variables declaration//GEN-END:variables



   @Override
   protected void getComandoElimina(Connection c)
    throws SQLException {
        String cmd;
        cmd = "delete from " + Database.schema + "." + "ClassDiagram"
               + " where Codice=?";
        try {
            Connection conn = Database.getDefaultConnection();
            PreparedStatement st = conn.prepareStatement(cmd);
            st.setString(1, tCodice.getText());
            st.executeUpdate();
            } catch (SQLException e) {
             mostraErrori(e);
        }     
   }
}